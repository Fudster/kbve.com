---
/** 
 * 

File by Appwrite Team, located here: https://github.com/appwrite/demos-for-astro/
CSS Profile by Tailwind ToolBox, located here: https://github.com/tailwindtoolbox/Profile-Card/

MIT License

Copyright (c) 2023 Appwrite, Tailwind Toolbox

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
 */

//<!--*             [IMPORT]
import N from "@n/N.astro"; //      [NameSpace]
import Profile from "@w/Profile.astro";
let title = "KBVE Account";
let description =
  "Manage your KBVE Profile and Account through our online portal";
---

<N ns="theme" title={title} description={description}>

  <!--! [AppWrite]->[START] -->

  <script>
    import { user$, logout } from "@lib/appwrite";

    const loginElem: HTMLElement | null =
      document.querySelector("#accountLoginLink");
    const userElem: HTMLElement | null = document.querySelector("#accountUser");

    // The issue that we face within this setup is that we can not scope it beyond the vanilla.
    // This means that while it will be fast, it does not mean that it will be safe.
    // The trade off of speed for security is one that is of an issue.

    // These three functions below will be removed and the profile widget will get converted into a jsx.


    // This function below is out of line, I will have to register a Gravatar as well for the email.
    function get_gravatar_image_url (email, size, default_image, allowed_rating, force_default)
    {
        email = typeof email !== 'undefined' ? email : 'example@kbve.com';
        size = (size >= 1 && size <= 2048) ? size : 80;
        default_image = typeof default_image !== 'undefined' ? default_image : 'mm';
        allowed_rating = typeof allowed_rating !== 'undefined' ? allowed_rating : 'g';
        force_default = force_default === true ? 'y' : 'n';
        
        return ("https://secure.gravatar.com/avatar/" + md5(email.toLowerCase().trim()) + "?size=" + size + "&default=" + encodeURIComponent(default_image) + "&rating=" + allowed_rating + (force_default === 'y' ? "&forcedefault=" + force_default : ''));
    }


    // Hide the element based upon the string that is given.
    function _hide(element: string)
    {
      let __v: HTMLElement | null = document.querySelector(element);
      if(__v) { __v.style.display = "none"; }
    }

    // Set the _K value of the element, both being a predefined set of objects that get identified via string, which gets parsed through javascript.
    function _k(element: string, value: string)
    {
      let __v: HTMLElement | null = document.querySelector(element);
      if(__v) { __v.innerHTML = value; }
      else 
      {
        console.log(`Cant Find ${element} `);
      }
    }

    //<!--! We want to migrate the console.log outside of the general javascript browser. While it makes sense to let the user know of the error, we should use this chance to build a solid reporting system. 
    //<!--TODO We want to make a reporting system that can be expanded outside of existing js frameworks, so that the system and the unit testing that we build is simple.
    //<!--TODO Keep Reports easy, stupid, simple.

    user$.subscribe((user) => {
      if (!loginElem || !userElem) return;
      if (user) {
        loginElem.style.display = "none";
        userElem.style.display = "block";

        const accountUserDetailElem: HTMLElement | null =
          document.querySelector("#accountUserDetail");

        if (accountUserDetailElem) {
          //<!--! This is a new scope that we started, ideally we would want this replacement done through a nanostore based system. 
          //<!--! We should not call the `api` for each request because it will then load the server. We let a 3rd party api handle soft reads?


         //<!--? This does not replace all but rather just one instance. I think that it makes esense to expand it to all but that could cause issues with the i18n.
          console.log(user);
          _hide("#loader");
          _k('#username',user.name);
          _k('#email',user.email);
          _k('#phone', user.phone || 'Phone is not set!');
          if(user.prefs.admin) {
          _k('#title', 'Admin');
          }
          _k('#data',JSON.stringify(user));
          //<!--? The line below was removed because it was not yet ready for what we had planned.
          //accountUserDetailElem.innerHTML = `Email: ${user.email} Admin: ${user.prefs.admin || false}`;
        }
      } else {
        loginElem.style.display = "block";
        userElem.style.display = "none";
      }
    });

    const logoutElem: HTMLButtonElement | null =
      document.querySelector("#account-logout");
    logoutElem?.addEventListener("click", (e) => {
      logout();
    });
  </script>
  <!--! [AppWrite]->[END] -->


  <!-- Well fetch failures... since I dont have internet. Forgot to build a way to give them dump data. -->
  <!-- Damn this means we are at lose again.  -->



  <section id="accountLoginLink">
    <a href="/account/login">Login</a>
    <a href="/account/register">Register</a>
  </section>

  <section id="loader">
    <div class="w-16 h-16 border-4 border-dashed rounded-full animate-spin dark:border-violet-400"></div>
    <div class="flex flex-col m-8 rounded shadow-md w-60 sm:w-80 animate-pulse h-96">
      <div class="h-48 rounded-t dark:bg-gray-700"></div>
      <div class="flex-1 px-4 py-8 space-y-4 sm:p-8 dark:bg-gray-900">
        <div class="w-full h-6 rounded dark:bg-gray-700"></div>
        <div class="w-full h-6 rounded dark:bg-gray-700"></div>
        <div class="w-3/4 h-6 rounded dark:bg-gray-700"></div>
      </div>
    </div>
  </section>

  <section id="accountUser">
    <div class="u-flex u-flex-vertical u-gap-4">
      <section id="accountUserDetail"></section>
      <Profile />
      <button id="account-logout" class="button">Logout</button>
    </div>
  </section>
</N>
