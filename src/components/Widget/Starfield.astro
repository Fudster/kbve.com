---
//<!--?         [INFO]=> The file for the splash is design to not be too focused on the way we handle the different points of information. 
//<!--?         The starfield file is not the best file to call upon as it isnt the fastest, we can improve upon the way that it calls the stars that are being called.
//<!--?         The issue with the calls within the object of the star is that the cost of performance is too high, it can also open up attack vectors within the indirect calls.
//<!--*         [DATA]
  const { icon, hex } = Astro.props;
//<!--!         We will be dropping this file because it will cost too much to run. The security to call this file within Astro will drop the performance cost as well.
//<!--TODO      Remove the file and state the reason besides the call of icon and hex.
---

<!-- The div-container is the location of the rendered file(s). -->
<div id="starfield" class="absolute inset-0">
  <canvas id="starfield-canvas"></canvas>
</div>

<!-- The script below is the setup for the basics of the starfield. We know that the current count is a set of 800 units. -->

<script>
  const COUNT = 800;
  const SPEED = 0.1;

  class Star {
    x: number;
    y: number;
    z: number;
    xPrev: number;
    yPrev: number;

    constructor(x = 0, y = 0, z = 0) {
      this.x = x;
      this.y = y;
      this.z = z;
      this.xPrev = x;
      this.yPrev = y;
    }

    update(width: number, height: number, speed: number) {
      this.xPrev = this.x;
      this.yPrev = this.y;
      this.z += speed * 0.0675;
      this.x += this.x * (speed * 0.0225) * this.z;
      this.y += this.y * (speed * 0.0225) * this.z;
      if (
        this.x > width / 2 ||
        this.x < -width / 2 ||
        this.y > height / 2 ||
        this.y < -height / 2
      ) {
        this.x = Math.random() * width - width / 2;
        this.y = Math.random() * height - height / 2;
        this.xPrev = this.x;
        this.yPrev = this.y;
        this.z = 0;
      }
    }

    draw(ctx: CanvasRenderingContext2D) {
      ctx.lineWidth = this.z;
      ctx.beginPath();
      ctx.moveTo(this.x, this.y);
      ctx.lineTo(this.xPrev, this.yPrev);
      ctx.stroke();
    }
  }

  const stars = Array.from({ length: COUNT }, () => new Star(0, 0, 0));
  let rafId = 0;

  const canvas = document.querySelector("#starfield-canvas") as HTMLCanvasElement;
  const ctx = canvas.getContext("2d");

  const container = document.querySelector("#starfield");
  const resizeObserver = new ResizeObserver(setup);
  resizeObserver.observe(container!);

  function setup() {
    rafId > 0 && cancelAnimationFrame(rafId);
    const { clientWidth: width, clientHeight: height } = container as Element;

    const dpr = window.devicePixelRatio || 1;
    canvas.width = width * dpr;
    canvas.height = height * dpr;
    canvas.style.width = `${width}px`;
    canvas.style.height = `${height}px`;
    ctx!.scale(dpr, dpr);

    for (const star of stars) {
      star.x = Math.random() * width - width / 2;
      star.y = Math.random() * height - height / 2;
      star.z = 0;
    }

    ctx!.translate(width / 2, height / 2);
    ctx!.fillStyle = "rgba(0, 0, 0, 0.4)";
    ctx!.strokeStyle = "white";
    rafId = requestAnimationFrame(frame);
  }

  function frame() {
    const { clientWidth: width, clientHeight: height } = container as Element;

    for (const star of stars) {
      star.update(width, height, SPEED);
      star.draw(ctx!);
    }

    ctx!.fillRect(-width / 2, -height / 2, width, height);
    rafId = requestAnimationFrame(frame);
  }
</script>

<!-- End of the script!  -->
<!--! This was a great script from the start to finish, it helped a ton to understand the different aspects of Astro.  -->
<!--! It is a shame that Google does not have their shit together xD -->